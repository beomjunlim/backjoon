#include<iostream>
#include<queue>
using namespace std;

int n;
int arr[100001];
vector<int>graph[100001];
bool visited[100001];
void dfs(int x) {//DFS 방법
	visited[x] = true;
	for (int i = 0; i < graph[x].size(); i++) {
		int next = graph[x][i];
		if (visited[next] == false) {
			arr[next] = x;//x의 자식들 배열에 x를 담아준다.
			dfs(next);
		}
	}
}
void bfs(int x) {
	queue<int>q;
	q.push(x);
	visited[x] = true;
	while (!q.empty()) {
		int s = q.front();
		q.pop();
		for (int i = 0; i < graph[s].size(); i++) {
			int y = graph[s][i];
			if (visited[y] == false) {
				q.push(y);
				arr[y] = s;
				visited[y] = true;
			}
		}
	}
}
int main() {
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	bfs(1);
	for (int i = 2; i <= n; i++) cout << arr[i] << '\n';
}
