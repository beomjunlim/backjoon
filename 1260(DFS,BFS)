#include <iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
using namespace std;

vector<int> graph[1000];
bool visited_dfs[1000] = { false };
bool visited_bfs[1000] = { false };
void dfs(int x) {
	visited_dfs[x] = true;
	cout << x << ' ';
	for (int i = 0; i < graph[x].size(); i++) {
		int y = graph[x][i];
		if (!visited_dfs[y])
			dfs(y);
	}
}

void bfs(int start) {
	queue<int>q;
	q.push(start);
	visited_bfs[start] = true;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		cout << x << ' ';
		for (int i = 0; i < graph[x].size(); i++) {
			int y = graph[x][i];
			if (!visited_bfs[y]) {
				q.push(y);
				visited_bfs[y] = true;
			}
		}
	}
}

int main() {
	int n, m;
	int x;
	cin >> n >> m>>x;
	while (m > 0) {
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
		m--;
	}
	for (int i = 1; i <= n; i++) {
		sort(graph[i].begin(), graph[i].end());
	}
	dfs(x);
	cout << '\n';
	bfs(x);
}
